// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kdwils/weatherstation/pkg/api (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/mock_client.go github.com/kdwils/weatherstation/pkg/api Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	api "github.com/kdwils/weatherstation/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetLatestDeviceObservation mocks base method.
func (m *MockClient) GetLatestDeviceObservation(ctx context.Context, deviceID, token string) (api.ObservationTempest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestDeviceObservation", ctx, deviceID, token)
	ret0, _ := ret[0].(api.ObservationTempest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestDeviceObservation indicates an expected call of GetLatestDeviceObservation.
func (mr *MockClientMockRecorder) GetLatestDeviceObservation(ctx, deviceID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestDeviceObservation", reflect.TypeOf((*MockClient)(nil).GetLatestDeviceObservation), ctx, deviceID, token)
}

// GetLatestStationObservation mocks base method.
func (m *MockClient) GetLatestStationObservation(ctx context.Context, stationID, token string) (api.ObservationReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStationObservation", ctx, stationID, token)
	ret0, _ := ret[0].(api.ObservationReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStationObservation indicates an expected call of GetLatestStationObservation.
func (mr *MockClientMockRecorder) GetLatestStationObservation(ctx, stationID, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStationObservation", reflect.TypeOf((*MockClient)(nil).GetLatestStationObservation), ctx, stationID, token)
}

// GetStationMetadata mocks base method.
func (m *MockClient) GetStationMetadata(ctx context.Context, token string) (api.StationMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStationMetadata", ctx, token)
	ret0, _ := ret[0].(api.StationMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStationMetadata indicates an expected call of GetStationMetadata.
func (mr *MockClientMockRecorder) GetStationMetadata(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStationMetadata", reflect.TypeOf((*MockClient)(nil).GetStationMetadata), ctx, token)
}
